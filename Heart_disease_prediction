#Using the Framingham Heart Study dataset, develop a deep learning model to predict the risk of heart 
#disease (binary classification: 1 for heart disease and 0 for no heart disease) based on various 
#health and demographic features.


import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Load the Framingham Heart Study dataset
# Ensure you've downloaded the dataset from Kaggle or another source
data = pd.read_csv('/Users/nikhilvalsankulangareth/Downloads/heart+disease/framingham.csv')

# Display the first few rows of the dataset
print(data.head())

# Preprocess the data
# Handle missing values (replace with median for simplicity)
data.fillna(data.median(), inplace=True)

# Split into features (X) and target (y)
X = data.drop('TenYearCHD', axis=1)  # 'TenYearCHD' is the target column (1 = heart disease, 0 = no heart disease)
y = data['TenYearCHD']

# Normalize the feature columns using StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Build the deep learning model
model = Sequential([
    Dense(64, input_dim=X_train.shape[1], activation='relu'),  # Input layer
    Dropout(0.5),  # Dropout layer to prevent overfitting
    Dense(32, activation='relu'),  # Hidden layer
    Dense(1, activation='sigmoid')  # Output layer (sigmoid for binary classification)
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=50, validation_split=0.2, batch_size=32)

# Evaluate the model on the test set
y_pred = (model.predict(X_test) > 0.5).astype(int)

# Evaluate performance using accuracy, precision, recall, and F1 score
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Score: {f1:.2f}")
